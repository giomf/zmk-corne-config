/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        home_row_mods_left: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 9 10 11 21 22 23 33 34 35 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        home_row_mods_right: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 2 3 4>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp Q                           &kp W                           &kp E                               &kp R                             &kp T        &kp Y    &kp U                          &kp I                                 &kp O                            &kp P                                   &none
&kp TAB     &home_row_mods_left LEFT_GUI A  &home_row_mods_left LEFT_ALT S  &home_row_mods_left LEFT_CONTROL D  &home_row_mods_left LEFT_SHIFT F  &kp G        &kp H    &home_row_mods_right RSHIFT J  &home_row_mods_right RIGHT_CONTROL K  &home_row_mods_right LEFT_ALT L  &home_row_mods_right LEFT_GUI DE_QMARK  &kp BACKSPACE
&none       &kp Z                           &kp X                           &kp C                               &kp V                             &kp B        &kp N    &kp M                          &kp DE_COMMA                          &kp DE_DOT                       &kp DE_EXCL                             &none
                                                                            &mo 3                               &mo 1                             &kp SPACE    &kp RET  &mo 2                          &none
            >;
        };

        lower_layer {
            bindings = <
&bt BT_CLR_ALL  &none         &none         &none         &none         &none           &kp DE_CARET      &kp DE_LPAR          &kp DE_RPAR          &kp DE_LBRC  &kp DE_RBRC  &none
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT          &kp DOWN             &kp UP               &kp RIGHT    &kp DE_DQT   &kp DEL
&none           &none         &none         &none         &none         &none           &kp DE_LESS_THAN  &kp DE_GREATER_THAN  &kp DE_LEFT_BRACKET  &kp DE_RBKT  &kp DE_SQT   &none
                                            &none         &none         &none           &none             &none                &none
            >;
        };

        raise_layer {
            bindings = <
&kp DE_AMPS   &kp DE_EQUAL  &kp DE_PLUS  &kp DE_MINUS  &kp DE_STAR  &kp DE_SLASH    &none  &none            &none            &none            &none  &none
&kp DE_PIPE   &kp N1        &kp N2       &kp N3        &kp N4       &kp N5          &none  &kp DE_A_UMLAUT  &kp DE_O_UMLAUT  &kp DE_U_UMLAUT  &none  &none
&kp DE_TILDE  &kp N6        &kp N7       &kp N8        &kp N9       &kp N0          &none  &kp DE_EURO      &kp DE_HASH      &kp DE_DLLR      &none  &none
                                         &none         &none        &none           &none  &none            &none
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans          &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans          &trans        &trans           &trans
                        &trans  &trans  &trans    &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };
    };
};
